<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[docker 入门教程]]></title>
    <url>%2F20170705%2Fdocker-introductory-tutorial%2F</url>
    <content type="text"><![CDATA[docker 是什么?]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo 使用文档]]></title>
    <url>%2F20170627%2Fhexo-docs%2F</url>
    <content type="text"><![CDATA[Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 特性超快速度Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。 支持 MarkdownHexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 一键部署只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。 丰富的插件Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。 安装安装前必备安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js Git 安装如果您的电脑中已经安装上述必备程序，那么接下来只需要使用 npm 即可完成 Hexo 的安装。 1$ npm install -g hexo-cli 如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。 安装 Git Windows：下载并安装 msysgit. Mac：使用 Homebrew, MacPorts 或下载 安装程序 安装。 Linux (Ubuntu, Debian)：sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core 安装 Node.js安装 Node.js 的最佳方式是使用 nvm。 cURL: 1$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh Wget: 1$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 安装完成后，重启终端并执行下列命令即可安装 Node.js。 1$ nvm install 0.10 或者您也可以下载 应用程序 来安装。 安装 Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 1$ npm install -g hexo-cli 开始使用安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 1234$ hexo init blog$ cd blog$ npm install$ hexo server 目录结构新建完成后，指定文件夹的目录如下： 123456789.├── _config.yml├── package.json├── scaffolds├── scripts├── source| ├── _drafts| └── _posts└── themes _config.yml网站的 配置 信息，您可以在此配置大部分的参数。 package.json应用程序的信息。 EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 12345678910111213&#123; &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;&quot;, &quot;private&quot;: true, &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;hexo-renderer-ejs&quot;: &quot;*&quot;, &quot;hexo-renderer-stylus&quot;: &quot;*&quot;, &quot;hexo-renderer-marked&quot;: &quot;*&quot; &#125; &#125; scaffolds模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 scripts脚本 文件夹。脚本是扩展 Hexo 最简易的方式，在此文件夹内的 JavaScript 文件会被自动执行。 source资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes主题 文件夹。Hexo 会根据主题来生成静态页面。 配置您可以在 _config.yml 中修改大部份的配置。 网站title: 网站标题subtitle: 网站副标题description: 网站描述author: 您的名字language: 网站使用的语言timezone: 网站时区。Hexo 预设使用您电脑的时区。时区列表 网址url: 网址root: 网站根目录permalink: [:year/:month/:day/:title/] 文章的 永久链接 格式permalink_default: 永久链接中各部分的默认值 目录source_dir: [source] 资源文件夹，这个文件夹用来存放内容。public_dir: [public] 公共文件夹，这个文件夹用于存放生成的站点文件。tag_dir: [tags] 标签文件夹archive_dir : [archives] 归档文件夹category_dir: [categories] 分类文件夹code_dir: [downloads/code] Include code 文件夹i18n_dir: [:lang] 国际化 i18n 文件夹skip_render : 跳过指定文件的渲染，您可使用 glob 来配置路径。 文章new_post_name: [:title.md] 新文章的文件名称default_layout: [post] 预设布局auto_spacing: [false] 在中文和英文之间加入空格titlecase: [false] 把标题转换为 title caseexternal_link: [true] 在新标签中打开链接filename_case: [0] 把文件名称转换为 (1) 小写或 (2) 大写render_drafts: [false] 显示草稿post_asset_folder: [false] 启动 Asset 文件夹relative_link: [false] 把链接改为与根目录的相对位址future: [true] 显示未来的文章highlight: 代码块的设置 分类 &amp; 标签default_category: [uncategorized] 默认分类category_map: 分类别名tag_map: 标签别名 日期 / 时间格式Hexo 使用 Moment.js 来解析和显示时间。 date_format: [MMM D YYYY] 日期格式time_format: [H:mm:ss] 时间格式 分页per_page: [10] 每页显示的文章量 (0 = 关闭分页功能)pagination_dir: [page] 分页目录 扩展theme: 当前主题名称deploy: 部署 命令命令简写12345678910111213141516171819# 新建$ hexo n &lt;title&gt;$ hexo new &lt;title&gt;# 草稿$ hexo p &lt;title&gt;$ hexo publist &lt;title&gt;# 生成$ hexo g$ hexo generate# 服务器$ hexo s$ hexo server# 部署$ hexo d$ hexo deploy init 初始化新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 1$ hexo init [folder] new 新建新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 1$ hexo new [layout] &lt;title&gt; 布局[layout] 您可以在命令中指定文章的布局(layout)，默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。 Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。 page: source/_postspost: sourcedraft: source/_drafts generate 生成静态文件生成静态文件。 1$ hexo generate -d, --deploy 文件生成后立即部署网站-w, --watch 监视文件变动 1234567# 生成静态文件并部署/或者部署前生成静态文件(两条命令相同)$ hexo generate -d$ hexo deploy -g# 监视文件变动$ hexo generate -w publish 发布草稿发表草稿。 1$ hexo publish [layout] &lt;filename&gt; server 本地服务器启动服务器。 1$ hexo server -p, --port 重设端口-s, --static 只使用静态文件-l, --log 启动日记记录，或覆盖记录格式 12345678# 重设端口$ hexo server -p 5000# 静态模式$ hexo server -s# 自定义IP$ hexo server -i 192.168.1.1 deploy 部署部署网站。 1$ hexo deploy -g, --generate 部署网站前，需要预先生成静态文件 123# 生成静态文件并部署/或者部署前生成静态文件(两条命令相同)$ hexo deploy -g$ hexo generate -d render 渲染文件渲染文件。 1$ hexo render &lt;file&gt; ... -o, --output 设置输出路径 clean 清除缓存清除缓存文件(db.json)和已生成的静态文件(public)。 1$ hexo clean list 清除缓存列出网站信息。 1$ hexo list &lt;type&gt; page, post, route, tag, category version 显示版本显示 Hexo 版本。 1$ hexo version migrate 迁移从其他系统 [迁移内容] 1$ hexo migrate &lt;type&gt; 选项安全模式在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。 1$ hexo --safe 调试模式在终端中显示调试信息并记录到 debug.log。 1$ hexo --debug 简洁模式隐藏终端信息。 1$ hexo --silent 自定义配置文件的路径自定义配置文件的路径，执行后将不再使用 _config.yml。 1$ hexo --config custom.yml 显示草稿显示 source/_drafts 文件夹中的草稿文章。 1$ hexo --draft 自定义 CWD自定义当前工作目录(Current working directory)的路径。 1$ hexo --cwd /path/to/cwd]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F20170626%2Fhello-world%2F</url>
    <content type="text"><![CDATA[欢迎来到Hexo! 这是你的第一篇文章。查看documentation以获取更多信息。如果在使用Hexo时遇到任何问题，您可以在troubleshooting中找到答案，或者您可以在GitHub上询问我。 快速开始创建一个新的帖子1$ hexo new "My New Post" 更多信息: Writing 运行服务器1$ hexo server 更多信息: Server 生成静态文件1$ hexo generate 更多信息: Generating 部署到远程站点1$ hexo deploy 更多信息: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Git 团队协作最佳实践]]></title>
    <url>%2F20160528%2Fgit-teamwork-best-practices%2F</url>
    <content type="text"><![CDATA[规范使用 GIT实际开发中，如果团队成员比较多，开发迭代频繁，对Git的应用比较混乱，会产生很多不必要的冲突等等。 Master(主) 分支Hotfix(补丁) 分支Develop(开发) 分支 主开发分支, 包含所有要发布到下一个Feature(功能) 分支Release(发布) 分支]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC tree 命令详解]]></title>
    <url>%2F20150429%2Ftree-command-annotation%2F</url>
    <content type="text"><![CDATA[MAC 下默认没有 tree 命令, 不过可以使用 find 命令模拟出 tree 命令的效果:12# 显示当前目录$ find . -print | sed -e &apos;s;[^/]*/;|——;g; s;——|; |;g&apos; 设置别名快速执行该命令 12345678$ cd ~$ vim .bash_profile# 在 .bash_profile 内写入以下命令, 保存并退出$$ alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|——;g; s;——|; |;g&apos;&quot;$# 直接运行 tree 命令$ tree 除了使用 find 模拟 tree 外, 还可以使用 homebrew 安装 tree 命令。 安装安装 tree 相当简单。然而在安装前，您必须检查电脑中是否已安装 homebrew 包管理器 homebrew 如果您的电脑中尚未安装 homebrew 包管理器，先安装 homebrew 包管理器。 12# 将以下命令粘贴至终端进行安装 brew$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 关于 homebrew 的使用请移驾至: HomeBrew 如果您的电脑中已经安装了 homebrew 包管理器，那么接下来只需要使用 brew 即可完成 tree 的安装。 1$ brew install tree tree 参数详解12# 彩色显示 1 层目录$ tree -C -L 1 常用参数-a 显示所有文件和目录 (默认显示所有的文件和目录)-L n 只显示 n 层目录 (n 为数字)-d 只显示目录名称-f 显示完整的相对路径以及名称-s 显示文件或目录大小。-r 以相反次序排列-t 用文件和目录的更改时间排序-C 文件和目录加上色彩，便于区分各种类型。-dirsfirst 目录显示在前,文件显示在后 更多参数-A 使用 ASNI 绘图字符显示树状图而非以 ASCII 字符组合-D 列出文件或目录的更改时间。-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。-N 直接列出文件和目录名称，包括控制字符。-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上 “*“, “/“, “=”, “@”, “|”号。-i 不以阶梯状列出文件或目录名称。-I 不显示符合范本样式的文件或目录名称。-n 不在文件和目录清单加上色彩。-p 列出权限标示。-P 只显示符合范本样式的文件或目录名称。-q 用”?”号取代控制字符，列出文件和目录名称。-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。]]></content>
  </entry>
</search>